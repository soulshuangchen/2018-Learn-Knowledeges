BFS多用于寻找最短路径的问题，DFS多用于快速发现底部节点



0.strtok


分解字符串为一组字符串。s为要分解的字符，delim为分隔符字符（如果传入字符串，则传入的字符串中每个字符均为分割符）。首次调用时，s指向要分解的字符串，之后再次调用要把s设成NULL
char *strtok(char s[], const char *delim);

strtok("abc,def,ghi",",")，最后可以分割成为abc def ghi.


函数第一次调用需设置两个参数。第一次分割的结果，返回串中第一个 ',' 之前的字符串,
第二次调用该函数strtok(NULL,","),第一个参数设置为NULL。结果返回分割依据后面的字串

char *tokenPtr=strtok(sentence," ");
    while(tokenPtr!=NULL)　{
        cout<<tokenPtr<<endl;
        tokenPtr=strtok(NULL," ");
    }




0.1.  memcpy


注意：1、内存空间不能够有重叠；

   2、memcpy对于需要复制的内容没有限制，因此用途更广；

      3、很明确的是memcpy是将 n个字节，  虽然memcpy对复制的内容完全没有任何的限制，比如数组，结构体等特殊的结构，


void *memCpy(void *dest, const void *src, size_t n)
{
	if (NULL == dest || NULL == src || n < 0)
		return NULL;
	char *tempDest = (char *)dest;
	char *tempSrc = (char *)src;
 
	while (n-- > 0)
		*tempDest++ = *tempSrc++;
	return dest;	
}


memset


 注意：1、n表示的是字节数，函数是以字节的形式每次赋值给目标地址；

      2、memset函数也是以字节为单位进行赋值的，所以要想在整形数组中给每一位赋确定的非0值，一般来讲是不可行的；（下方将有对此说明测试的程序）


void *memSet(void *s, int c, size_t n)
{
	if (NULL == s || n < 0)
		return NULL;
	char * tmpS = (char *)s;
	while(n-- > 0)
		*tmpS++ = c;
		return s; 
}



0.2. 最短路径―Dijkstra算法和Floyd算法


Dijkstra(迪杰斯特拉)算法是典型的单源最短路径算法，用于计算一个节点到其他所有节点的最短路径。主要特点是以起始点为中心向外层层扩展，直到扩展到终点为止。

问题描述：在无向图 G=(V,E) 中，假设每条边 E[i] 的长度为 w[i]，找到由顶点 V0 到其余各点的最短路径。（单源最短路径）




Floyd-Warshall算法（Floyd-Warshall algorithm）是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权的最短路径问题，同时也被用于计算有向图的传递闭包。Floyd-Warshall算法的时间复杂度为O(N3)，空间复杂度为O(N2)。








可以看到，类对象大小没有因为增加了静态成员而变化。因为静态成员是属于类成员共有的，不单独属于任何一个对象，对静态成员的存储不会选择在某个对象空间，而是存在于堆当中，因此不会对对象的大小造成影响。






1. C语言陷阱：

内存重叠的处理、临时变量太多或者没安全释放、没有测试内存越界、指针操作不收悉











2.乐观锁、悲观锁：
乐观锁：
总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现

 version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。

update table set x=x+1, version=version+1 where id=#{id} and version=#{version};  

CAS操作方式：数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试


悲观锁： 总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁，在Java中，synchronized的思想也是悲观锁

















使用分子分母同除以最大公倍数即可得到最简分数:


int a = y1;
int b = x1;
int temp;

while(a%b)
        {
           temp = a%b;
           a = b;
           b = temp;
        }
return to_string(y1/b) + "/" + to_string(x1/b); 





dp[h] = min[dp[h->左](左边的楼梯)+(左边楼梯移动的时间)+空中掉落的时间，dp[h->右](右边的楼梯)+(右边楼梯移动的时间)+空中掉落的时间）,边界条件就是底部dp[0]=0